{"version":3,"sources":["Utils/constants.js","Utils/fixtureGridTools.js","Screens/FixtureGrid/Helpers/PowerCalculation/powerCalculation.js","Screens/FixtureGrid/Utils/FixtureGridColDef.js","Screens/FixtureGrid/Components/ReportModal.js","Screens/FixtureGrid/Components/ImportModal.js","Screens/FixtureGrid/Components/ExportModal.js","Screens/FixtureGrid/Components/LabelModal.js","Screens/FixtureGrid/Components/SettingsModal.js","Screens/FixtureGrid/Components/FixtureDetailModal.js","Screens/FixtureGrid/Components/PowerDetailModal.js","Screens/FixtureGrid/Components/LibraryModal.js","Screens/FixtureGrid/Components/DimmerSettingsModal.js","Screens/FixtureGrid/FixtureGrid.js","Screens/Hoists/Utils/HoistGridColDef.js","Screens/Hoists/HoistGrid.js","Screens/Truss/Utils/TrussGridColDef.js","Screens/Truss/TrussGrid.js","Screens/SocaList/Utils/SocaListColDef.js","Screens/SocaList/SocaList.js","Screens/DmxList/Utils/DmxListColDef.js","Screens/DmxList/DmxList.js","Screens/Scaff/Utils/ScaffGridColDef.js","Screens/Scaff/ScaffGrid.js","Screens/Main/GLMainWrapper.js","App.js","serviceWorker.js","index.js"],"names":["circuitTypes","title","value","circuitNameComparator","input1","input2","circuit1","isBrumStyle","circuit2","typeAsNumber","dc","pdu","socaNumber","circuit","type","substring","parseInt","Number","isNaN","lastPart","length","indexOf","splits","split","circuitNumber","patchParser","patch","indexOfDotSeparator","indexOfSlashSeparator","universe","address","dmxLineComparator","dmx1","dmx2","dmx1asArr","parseDmxLine","dmx2asArr","dmxLine","delimiter","parts","circuitTypeCellRenderer","params","undefined","toString","calculatePower","rows","dimmerAddressAndUniverse","Promise","resolve","reject","p1","p2","p3","forEach","node","circuitType","circuitName","rawWattage","wattage","startAddress","numberOfChannels","dmx","includes","parsePatch","phaseSequ","phase","charAt","total","phase1","phase2","phase3","phase1Frac","toFixed","phase2Frac","phase3Frac","printPower","p","vwxFixtureData","headerName","children","field","sortable","userFixtureData","editable","general","sort","comparator","val1","val2","v1","v2","patch1","patch2","valueGetter","data","userFields","resizable","power","cellRenderer","vwxCadData","createColDef","colDef","push","pdfMake","require","pdfFonts","vfs","ReportModal","props","state","tags","tagsToPrint","reportTitle","templates","onShow","bind","printReport","handleChange","createReport","showReport","downloadReport","this","setState","createTags","rowData","keys","Object","res","entry","s","toUpperCase","slice","reportHeader","text","style","header","tableData","row","widths","i","content","table","headerRows","body","styles","fontSize","bold","margin","subheader","tableExample","tableHeader","color","info","pdf","createPdf","open","download","print","console","log","Modal","show","onHide","size","Header","Body","Form","fluid","FormGroup","ControlLabel","Input","name","onChange","TagPicker","searchable","block","valueKey","labelKey","onSelect","val","Footer","Button","appearance","onClick","React","Component","ImportModal","fileInputRef","createRef","dataType","lightingDevices","currentStep","diffText","updateData","add","delete","update","logString","existingData","uploadFile","mergeData","overwriteData","saveFixtureDataToLocalstorage","diffData","printDiff","event","files","target","fileToOpen","reader","FileReader","readAsText","onload","a","JSON","parse","result","listInfo","diff","onerror","error","kaffe","key","localStorage","setItem","stringify","getRowData","newData","Array","isArray","updates","added","deleted","addedLogString","updatesLogString","deletedLogString","newEntry","newFixture","existing","__UID","instrumentType","channel","uid","deletedFixture","_","isEqual","keys1","keys2","allKeys","concat","uniqueKeys","uniq","updateStr","haveDifferences","marginBottom","marginTop","componentClass","placeholder","disabled","minHeight","marginLeft","marginRight","Steps","current","Item","FlexboxGrid","justify","align","height","colspan","Panel","bordered","click","map","ButtonToolbar","ref","multiple","hidden","accept","filename","warning","downloadData","fileName","LabelModal","SettingsModal","colDefParams","submit","handleChecked","updateColDef","checked","CheckboxGroup","Checkbox","FixtureDetailModal","columnDefs","gridApi","api","AgGridColumnApi","columnApi","uniqueFixturesAndModes","fixtureDetailData","fixtureMode","userInstrumentType","userFixtureMode","existsInList","setRowData","sizeColumnsToFit","forEachNode","addUserModeAndName","className","setQuickFilter","width","flex","onGridReady","defaultColDef","singleClickEdit","enterMovesDownAfterEdit","rowSelection","PowerDetailModal","quickSearch","addPhaseSequence","addCircuitTypeSequence","uniqueCircuits","addPowerDetails","applyTransaction","selectedRows","getSelectedRows","index","SelectPicker","cleanable","getRowNodeId","LibraryModal","LightingLibrary","DimmerSettingsModal","submitResult","setDimmerAddressAndUniverse","FixtureGrid","totalPower","selectedPower","showImportModal","showExportModal","showReportModal","showLabelModal","showSettingsModal","showPowerDetailModal","showLibraryModal","showDimmerSettingsModal","reportData","showFixtureDetailModal","saveColumnState","getFixtureDataFromLocalstorage","calculateTotalPower","powerData","forEachNodeAfterFilterAndSort","lookup","transactionData","updatedNode","dataToUpdate","source","exportDate","moment","format","exportTime","fixtureCount","fileToDownload","Blob","saveAs","savedState","getColumnState","getItem","newState","applyColumnState","stringData","onRowDataUpdated","Container","Navbar","Nav","Dropdown","pullRight","icon","Icon","Content","sideBar","onSelectionChanged","onRowDataChanged","ExportModal","HoistGrid","HoistData","hoists","resizeable","TrussGrid","Trussdata","truss","cellEditorSelector","component","values","SocaList","FixtureData","socaList","position","getSocaNamesFromData","enterMovesDown","DmxList","dmxList","getDmxLinesFromFromData","paginationChanged","ScaffGrid","Scaffdata","scaff","window","ReactDOM","config","GLMainWrapper","self","setTimeout","createGoldenLayout","layout","layOutChange","myLayoutTicket","GL","_isFullPage","registerComponent","init","input","App","document","Boolean","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f3255b3.chunk.js","sourcesContent":["export const CIRCUIT_TYPE_HOT = 1;\nexport const CIRCUIT_TYPE_DIM = 2;\n\nexport const circuitTypes = [\n  {\n    title: \"HOT\",\n    value: CIRCUIT_TYPE_HOT,\n  },\n  {\n    title: \"DIM\",\n    value: CIRCUIT_TYPE_DIM,\n  },\n];\n","import {CIRCUIT_TYPE_DIM,CIRCUIT_TYPE_HOT} from './constants';\n\nexport function circuitComparator(input1, input2) {\n  let circuit1 = isBrumStyle(input1);\n  let circuit2 = isBrumStyle(input2);\n\n  if (circuit1 === null && circuit2 === null) {\n    return 0;\n  }\n  if (circuit1 === null) {\n    return -1;\n  }\n  if (circuit2 === null) {\n    return 1;\n  }\n\n  let value1 =\n    circuit1.typeAsNumber * 100000 +\n    circuit1.dc * 10000 +\n    circuit1.pdu * 1000 +\n    circuit1.socaNumber * 10 +\n    circuit1.circuitNumber;\n  let value2 =\n    circuit2.typeAsNumber * 100000 +\n    circuit2.dc * 10000 +\n    circuit2.pdu * 1000 +\n    circuit2.socaNumber * 10 +\n    circuit2.circuitNumber;\n\n  return value1 - value2;\n}\n\nexport function circuitNameComparator(input1, input2) {\n  let circuit1 = isBrumStyle(input1);\n  let circuit2 = isBrumStyle(input2);\n\n  if (circuit1 === null && circuit2 === null) {\n    return 0;\n  }\n  if (circuit1 === null) {\n    return -1;\n  }\n  if (circuit2 === null) {\n    return 1;\n  }\n\n  let value1 =\n    circuit1.typeAsNumber * 100000 +\n    circuit1.dc * 10000 +\n    circuit1.pdu * 1000 +\n    circuit1.socaNumber * 10;\n\n  let value2 =\n    circuit2.typeAsNumber * 100000 +\n    circuit2.dc * 10000 +\n    circuit2.pdu * 1000 +\n    circuit2.socaNumber * 10;\n\n  return value1 - value2;\n}\n\nexport function isBrumStyle(circuit) {\n  // H11'11-1\n\n  let type = circuit.substring(0, 1);\n\n  // Check if circuit starts with H or D\n  if (type === \"H\" || type === \"D\") {\n    let typeAsNumber = type === \"H\" ? CIRCUIT_TYPE_HOT : CIRCUIT_TYPE_DIM;\n    // get dimmercity number\n    let dc = parseInt(circuit.substring(1, 2));\n\n    if (!Number.isNaN(dc)) {\n      let pdu = parseInt(circuit.substring(2, 3));\n\n      if (!Number.isNaN(pdu)) {\n        if (circuit.substring(3, 4) === \"'\") {\n          let lastPart = circuit.substring(4, circuit.length);\n\n          // No - is the same as no circuit number\n          if (lastPart.indexOf(\"-\") === -1) {\n            let socaNumber = parseInt(lastPart);\n            return {\n              dc,\n              pdu,\n              socaNumber,\n              typeAsNumber,\n            };\n          } else {\n            let splits = lastPart.split(\"-\");\n            if (splits.length === 2) {\n              let socaNumber = parseInt(splits[0]);\n              let circuitNumber = parseInt(splits[1]);\n\n              return {\n                dc,\n                pdu,\n                socaNumber,\n                circuitNumber,\n                typeAsNumber,\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport function patchComparator(patch1, patch2) {\n  let p1 = patchParser(patch1);\n  let p2 = patchParser(patch2);\n\n  if (p1 === null && p2 === null) {\n    return 0;\n  }\n\n  if (p1 === null) {\n    return -1;\n  }\n  if (p2 === null) {\n    return 1;\n  }\n\n  let calc1 = p1.universe * 1000 + p1.address;\n  let calc2 = p2.universe * 1000 + p2.address;\n\n  return calc1 - calc2;\n}\n\nexport function patchParser(patch) {\n  let indexOfDotSeparator = patch.indexOf(\".\");\n  let indexOfSlashSeparator = patch.indexOf(\"/\");\n\n  if (indexOfDotSeparator > -1) {\n    let universe = parseInt(patch.substring(0, indexOfDotSeparator));\n    let address = parseInt(\n      patch.substring(indexOfDotSeparator + 1, patch.length)\n    );\n\n    if (Number.isNaN(universe) || Number.isNaN(address)) {\n      return null;\n    } else {\n      return {\n        universe,\n        address,\n      };\n    }\n  }\n\n  if (indexOfSlashSeparator > -1) {\n    let universe = parseInt(patch.substring(0, indexOfDotSeparator));\n    let address = parseInt(\n      patch.substring(indexOfDotSeparator + 1, patch.length)\n    );\n\n    if (Number.isNaN(universe) || Number.isNaN(address)) {\n      return null;\n    } else {\n      return {\n        universe,\n        address,\n      };\n    }\n  }\n  return null;\n}\n\nexport function dmxLineComparator(dmx1, dmx2) {\n  let dmx1asArr = parseDmxLine(dmx1, \"-\");\n  let dmx2asArr = parseDmxLine(dmx2, \"-\");\n\n  if (dmx1asArr.length !== 2 && dmx2asArr.length !== 2) {\n    return 0;\n  }\n\n  if (dmx1asArr.length !== 2) {\n    return -1;\n  }\n\n  if (dmx2asArr.length !== 2) {\n    return 1;\n  }\n\n  return (\n    dmx1asArr[0] * 100 + dmx1asArr[1] - (dmx2asArr[0] * 100 + dmx2asArr[1])\n  );\n}\n\nexport function parseDmxLine(dmxLine, delimiter) {\n  if (dmxLine.indexOf(delimiter) !== -1) {\n    let parts = dmxLine.split(delimiter);\n    return [parseInt(parts[0]), parseInt(parts[1])];\n  }\n  return [dmxLine];\n}\n\nexport function stringNumberComparator(val1, val2) {\n  \n  let v1 = parseInt(val1);\n  let v2 = parseInt(val2);\n\n  if(Number.isNaN(v1) && Number.isNaN(v2)){\n    return 0;\n  }\n\n  if(Number.isNaN(v1)){\n    return -1;\n  }\n\n  if(Number.isNaN(v2)){\n    return 1;\n  }\n  \n  return v1 - v2;\n}\n\n\nexport const circuitTypeCellRenderer = (params) => {\n    if (params.value !== undefined && params.value !== null) {\n      if (params.value.toString() === \"1\") {\n        return \"HOT\";\n      } else if (params.value.toString() === \"2\") {\n        return \"DIM\";\n      }\n    }\n    return null;\n  }\n\n","import React from \"react\";\nimport { isBrumStyle } from \"../../../../Utils/fixtureGridTools\";\nimport { CIRCUIT_TYPE_DIM, CIRCUIT_TYPE_HOT } from \"../../../../Utils/constants\";\n\nconst parsePatch = (patch, delimiter) => {\n  if (patch.includes(delimiter)) {\n    const splits = patch.split(delimiter);\n    const universe = parseInt(splits[0]);\n    const address = parseInt(splits[1]);\n    if (!universe.isNaN && !address.isNaN) {\n      return { universe, address };\n    }\n  }\n  return null;\n};\n\nexport const calculatePower = (rows, dimmerAddressAndUniverse) => {\n  return new Promise((resolve, reject) => {\n    let p1 = 0;\n    let p2 = 0;\n    let p3 = 0;\n\n    rows.forEach((node) => {\n      let circuitNumber = 0;\n\n      // Get circuit type from circuitType, or from brumStyle notation, or nothing..\n\n      let circuitType = 0;\n      if (\"circuitType\" in node) {\n        circuitType = node.circuitType;\n      } else if (isBrumStyle(node.circuitName)) {\n        circuitType = isBrumStyle(node.circuitName).typeAsNumber;\n      }\n\n      // Extract power from data:\n      let rawWattage = node.wattage;\n      let wattage = 0;\n      if (rawWattage.indexOf(\"W\") !== -1) {\n        // We have a W in our wattage\n        wattage = parseInt(rawWattage.substring(0, rawWattage.indexOf(\"W\")));\n      } else if (rawWattage.indexOf(\"w\") !== -1) {\n        // We have a w in our wattage\n        wattage = parseInt(rawWattage.substring(0, rawWattage.indexOf(\"W\")));\n      } else {\n        // We have no W or w\n        wattage = parseInt(rawWattage);\n      }\n\n      // Something went wrong. Wattage is not a number\n      if (Number.isNaN(wattage)) reject(\"Not a number\");\n\n      // Be sure that this is a valid circuitType\n      if (circuitType === CIRCUIT_TYPE_HOT || circuitType === CIRCUIT_TYPE_DIM) {\n        // HOT POWER\n        if (circuitType === CIRCUIT_TYPE_HOT) {\n          circuitNumber = parseInt(node.circuitNumber);\n          if (Number.isNaN(circuitNumber)) reject(\"Not a number\");\n        }\n\n        // DIM POWER\n        if (circuitType === CIRCUIT_TYPE_DIM) {\n          // Hard coded values for dimmer for testing\n          /// TODO: Get these from redux or what not..\n          const startAddress = dimmerAddressAndUniverse.address;\n          const universe = dimmerAddressAndUniverse.universe;\n          const numberOfChannels = dimmerAddressAndUniverse.numberOfChannels;\n\n          // Get address and universe from the current fixture\n          const dmx = parsePatch(node.patch, \".\");\n\n          // Correct universe\n          if (dmx.universe === universe) {\n            // Within the range of the dimmer\n            if (dmx.address < startAddress + numberOfChannels && dmx.address >= startAddress) {\n              const dimmerChannel = dmx.address - startAddress;\n              const dimmerChannelAsCircuitNumber = (dimmerChannel % 6) + 1;\n\n              circuitNumber = dimmerChannelAsCircuitNumber;\n            }\n          }\n        }\n\n        if (\"phaseSequ\" in node && node.phaseSequ) {\n          const phaseSequ = node.phaseSequ;\n          if (phaseSequ.length === 6) {\n            // If there is 6 letters in phase sequenc\n            const phase = parseInt(phaseSequ.charAt(circuitNumber - 1));\n\n            // If the phase is valid. E.g: 1,2 or 3.\n            if (phase === 1) {\n              p1 += wattage;\n            }\n            if (phase === 2) {\n              p2 += wattage;\n            }\n            if (phase === 3) {\n              p3 += wattage;\n            }\n          }\n        } else {\n          if (circuitNumber === 1 || circuitNumber === 4) {\n            p1 += wattage;\n          } else if (circuitNumber === 2 || circuitNumber === 5) {\n            p2 += wattage;\n          } else if (circuitNumber === 3 || circuitNumber === 6) {\n            p3 += wattage;\n          }\n        }\n      }else{\n        reject(\"Missing circuit type\")\n      }\n    });\n\n    let total = p1 + p2 + p3;\n\n    let power = {\n      phase1: p1,\n      phase2: p2,\n      phase3: p3,\n      total,\n      phase1Frac: ((p1 / total) * 100).toFixed(0),\n      phase2Frac: ((p2 / total) * 100).toFixed(0),\n      phase3Frac: ((p3 / total) * 100).toFixed(0),\n    };\n    resolve(power);\n  });\n};\n\nexport const printPower = (p) => {\n  return (\n    <div>\n      <ul>\n        <li>\n          L1: <b>{p.phase1} W</b> ({p.phase1Frac}%)\n        </li>\n        <li>\n          L2: <b>{p.phase2} W</b> ({p.phase2Frac}%)\n        </li>\n        <li>\n          L3: <b>{p.phase3} W</b> ({p.phase3Frac}%)\n        </li>\n        <li>\n          Total: <b>{p.total} W</b>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import {\n  patchComparator,\n  circuitNameComparator,\n  circuitComparator,\n  dmxLineComparator,\n  stringNumberComparator,\n  circuitTypeCellRenderer\n} from \"../../../Utils/fixtureGridTools\";\n\n\nconst vwxFixtureData = {\n  headerName: \"VWX Fixture Data\",\n\n  children: [\n    {\n      headerName: \"Fixture Type\",\n      field: \"instrumentType\",\n      sortable: true,\n    },\n\n    {\n      headerName: \"Fixture Mode\",\n      field: \"fixtureMode\",\n      sortable: true,\n    },\n  ],\n};\n\nconst userFixtureData = {\n  headerName: \"User Fixture Data\",\n  children: [\n    {\n      headerName: \"User Fixture Type\",\n      field: \"userInstrumentType\",\n      sortable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User Fixture Mode\",\n      field: \"userFixtureMode\",\n      sortable: true,\n      editable: true,\n    },\n  ],\n};\n\nconst general = {\n  headerName: \"General\",\n  children: [\n    {\n      headerName: \"Position\",\n      field: \"position\",\n      sortable: true,\n      editable: true,\n    },\n    {\n      headerName: \"Channel\",\n      field: \"channel\",\n      sortable: true,\n      sort: \"asc\",\n      comparator: stringNumberComparator,\n    },\n    {\n      headerName: \"Patch\",\n      field: \"patch\",\n      sortable: true,\n      comparator: patchComparator,\n    },\n    {\n      headerName: \"Circuit\",\n      sortable: true,\n      comparator: circuitComparator,\n      valueGetter: (params) => {\n        return params.data.circuitName + \"-\" + params.data.circuitNumber;\n      },\n    },\n    {\n      headerName: \"Wattage\",\n      field: \"wattage\",\n      sortable: true,\n      editable: true,\n    },\n    {\n      headerName: \"DMX Line\",\n      field: \"dmxLine\",\n      sortable: true,\n      editable: true,\n      comparator: dmxLineComparator,\n    },\n  ],\n};\n\nconst userFields = {\n  headerName: \"User Fields\",\n  children: [\n    {\n      headerName: \"User 1\",\n      field: \"userField1\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User 2\",\n      field: \"userField2\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User 3\",\n      field: \"userField3\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User 4\",\n      field: \"userField4\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User 5\",\n      field: \"userField5\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n    {\n      headerName: \"User 6\",\n      field: \"userField6\",\n      sortable: true,\n      resizable: true,\n      editable: true,\n    },\n  ],\n};\n\nconst power = {\n  headerName: \"Power\",\n  children: [\n    {\n      headerName: \"Circuit Name\",\n      field: \"circuitName\",\n      sortable: true,\n      editable: true,\n      comparator: circuitNameComparator,\n    },\n    {\n      headerName: \"Circuit Number\",\n      field: \"circuitNumber\",\n      sortable: true,\n      editable: true,\n    },\n    {\n      headerName: \"Circuit Type\",\n      field: \"circuitType\",\n      cellRenderer: circuitTypeCellRenderer,\n    },\n    {\n      headerName: \"Phase sequence\",\n      field: \"phaseSequ\",\n      editable: true,\n    },\n    {\n      headerName: \"Load dynamics\",\n      field: \"loadDynamics\",\n    },\n  ],\n};\n\nconst vwxCadData = {\n  headerName: \"VWX Cad data\",\n  children: [\n    {\n      headerName: \"VWX Class\",\n      field: \"class\",\n      sortable: true,\n      editable: true,\n    },\n    {\n      headerName: \"VWX Layer\",\n      field: \"layer\",\n      sortable: true,\n      editable: false,\n    },\n    {\n      headerName: \"UID\",\n      field: \"__UID\",\n      sortable: true,\n    },\n  ],\n};\n\n// All fields\nexport const colDef = [vwxFixtureData, userFixtureData, general, userFields, power, vwxCadData];\n\n// Possible to turn on and off fields.\n/*\nconst params = {\n  vwxFixtureData: true, \n  userFixtureData: true, \n  general: true, \n  userFields: true, \n  power: true,\n  vwxCadData: true, \n}\n*/\nexport const createColDef = (params) => {\n  let colDef = [];\n\n  if (params.vwxFixtureData) {\n    colDef.push(vwxFixtureData);\n  }\n\n  if (params.userFixtureData) {\n    colDef.push(userFixtureData);\n  }\n\n  if (params.general) {\n    colDef.push(general);\n  }\n\n  if (params.userFields) {\n    colDef.push(userFields);\n  }\n\n  if (params.power) {\n    colDef.push(power);\n  }\n\n  if (params.vwxCadData) {\n    colDef.push(vwxCadData);\n  }\n\n  return colDef;\n};\n","import React from \"react\";\nimport {\n  Form,\n  Modal,\n  Button,\n  TagPicker,\n  FormGroup,\n  ControlLabel,\n  Input,\n} from \"rsuite\";\n\nconst pdfMake = require(\"pdfmake/build/pdfmake.js\");\nconst pdfFonts = require(\"pdfmake/build/vfs_fonts.js\");\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nclass ReportModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tags: [],\n      tagsToPrint: [],\n      reportTitle: \"\",\n      templates: [],\n    };\n\n    this.onShow = this.onShow.bind(this);\n    this.printReport = this.printReport.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createReport = this.createReport.bind(this);\n    this.showReport = this.showReport.bind(this);\n    this.downloadReport = this.downloadReport.bind(this);\n    this.printReport = this.printReport.bind(this);\n  }\n\n  onShow() {\n    this.setState({ tagsToPrint: [], reportTitle: \"\" });\n    this.createTags();\n  }\n\n  createTags() {\n    const capitalize = (s) => {\n      if (typeof s !== \"string\") return \"\";\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    const data = this.props.rowData[0];\n    let keys = Object.keys(data);\n\n    keys.sort();\n\n    let res = [];\n    keys.forEach((entry) => {\n      res.push({\n        title: capitalize(entry),\n        field: entry,\n      });\n    });\n\n    this.setState({ tags: res });\n  }\n\n  createReport() {\n    const tagsToPrint = this.state.tagsToPrint;\n\n    // Create header\n    const reportHeader = { text: this.state.reportTitle, style: \"header\" };\n\n    // Create header with correct styling\n    let header = [];\n    tagsToPrint.forEach((entry) => {\n      header.push({\n        text: entry,\n        style: \"tableHeader\",\n      });\n    });\n\n    // Add header as first row\n    let tableData = [header];\n\n    // Get all data from dataset\n    const data = this.props.rowData;\n\n    // Loop through all data fields and create table content\n    data.forEach((entry) => {\n      let row = [];\n      tagsToPrint.forEach((field) => {\n        const value = entry[field];\n        row.push(value);\n      });\n      tableData.push(row);\n    });\n\n    // Create a set of widths for table\n    let widths = [];\n    for (let i = 0; i < tagsToPrint.length; i++) {\n      widths.push(\"auto\");\n    }\n\n    // The main table it self\n    const reportTable = {\n      style: \"tableExample\",\n      widths,\n      table: {\n        headerRows: 1,\n        body: tableData,\n      },\n    };\n\n    // Styles\n    const styles = {\n      header: {\n        fontSize: 18,\n        bold: true,\n        margin: [0, 0, 0, 10],\n      },\n      subheader: {\n        fontSize: 16,\n        bold: true,\n        margin: [0, 10, 0, 5],\n      },\n      tableExample: {\n        margin: [0, 5, 0, 15],\n        fontSize: 11,\n      },\n      tableHeader: {\n        bold: true,\n        fontSize: 13,\n        color: \"black\",\n      },\n    };\n\n    // Meta data for the pdf. \n    const info = {\n      title: this.state.reportTitle,\n    }\n\n    // Put it all together as one big document\n    const pdf = {\n      content: [\n        reportHeader,\n        reportTable,\n      ],\n      styles,\n      info,\n    };\n    return pdf;\n  }\n\n  showReport() {\n    const pdf = this.createReport();\n\n    pdfMake.createPdf(pdf).open();\n\n    this.setState({\n      tagsToPrint: [],\n    });\n  }\n\n  downloadReport() {\n    const pdf = this.createReport();\n\n    pdfMake.createPdf(pdf).download();\n\n    this.setState({\n      tagsToPrint: [],\n    });\n  }\n\n  printReport() {\n    const pdf = this.createReport();\n\n    pdfMake.createPdf(pdf).print();\n\n    this.setState({\n      tagsToPrint: [],\n    });\n  }\n\n  handleChange(value) {\n    console.log(value);\n    this.setState({ tagsToPrint: value });\n  }\n\n  render() {\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={this.props.onHide}\n        size=\"lg\"\n        onShow={this.onShow}\n      >\n        <Modal.Header>\n          <h3>Report Generator</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form fluid>\n            <FormGroup>\n              <ControlLabel>Title</ControlLabel>\n              <Input\n                name=\"name\"\n                onChange={(value) => this.setState({ reportTitle: value })}\n                value={this.state.reportTitle}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <ControlLabel>Fields</ControlLabel>\n              <TagPicker\n                searchable={true}\n                data={this.state.tags}\n                block\n                valueKey={\"field\"}\n                labelKey={\"title\"}\n                value={this.state.tagsToPrint}\n                onChange={this.handleChange}\n                onSelect={(val) => console.log(val)}\n              />\n            </FormGroup>\n\n            {/* <FormGroup>\n              <ControlLabel>Templates</ControlLabel>\n              <Dropdown \n                data={this.state.templates}\n                labelKey=\"\"\n                valueKey=\"\"\n                \n              />\n            </FormGroup> */}\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.showReport}>\n            Show\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.downloadReport}>\n            Download\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.printReport}>\n            Print\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default ReportModal;\n","import React, { createRef } from \"react\";\nimport { Modal, Button, Steps, Panel, FlexboxGrid, FormGroup, Form, Input, ButtonToolbar } from \"rsuite\";\nimport _ from \"lodash\";\n\nclass ImportModal extends React.Component {\n  fileInputRef = createRef(null);\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      info: [],\n      dataType: null,\n      lightingDevices: [],\n      currentStep: 0,\n      diffText: \"\",\n      updateData: {\n        add: [],\n        delete: [],\n        update: [],\n        logString: \"\",\n      },\n    };\n    this.existingData = [];\n\n    this.uploadFile = this.uploadFile.bind(this);\n    this.mergeData = this.mergeData.bind(this);\n    this.overwriteData = this.overwriteData.bind(this);\n    this.saveFixtureDataToLocalstorage = this.saveFixtureDataToLocalstorage.bind(this);\n    this.onShow = this.onShow.bind(this);\n    this.diffData = this.diffData.bind(this);\n    this.printDiff = this.printDiff.bind(this);\n  }\n\n  uploadFile(event) {\n    const { files } = event.target;\n\n    if (files.length > 0) {\n      const fileToOpen = files[0];\n\n      const reader = new FileReader();\n      reader.readAsText(fileToOpen);\n      reader.onload = async () => {\n        let data = JSON.parse(reader.result);\n\n        if (\"info\" in data) {\n          this.listInfo(data.info[0]);\n        }\n\n        if (\"lightingDevices\" in data) {\n          let diff = await this.diffData(this.existingData, data.lightingDevices);\n          this.setState({ lightingDevices: data.lightingDevices, updateData: diff, currentStep: 1 });\n        }\n      };\n      reader.onerror = (error) => {\n        console.log(error);\n      };\n    }\n  }\n\n  listInfo(info) {\n    if (info) {\n      let kaffe = [];\n      for (let key in info) {\n        kaffe.push({\n          key,\n          value: info[key],\n        });\n      }\n      this.setState({ info: kaffe });\n    }\n  }\n\n  saveFixtureDataToLocalstorage(data) {\n    localStorage.setItem(\"fixtureData\", JSON.stringify(data));\n  }\n\n  overwriteData() {\n    const data = this.state.lightingDevices;\n    this.props.overwriteData(data);\n    this.props.onHide();\n    this.saveFixtureDataToLocalstorage(data);\n  }\n\n  mergeData() {\n    const data = this.state.updateData;\n    this.props.mergeData(data);\n    this.props.onHide();\n  }\n\n  async onShow() {\n    this.setState({ info: [], currentStep: 0 });\n\n    this.existingData = await this.props.getRowData();\n  }\n\n  diffData(existingData, newData) {\n    return new Promise((resolve, reject) => {\n      if (!(Array.isArray(existingData) && Array.isArray(newData))) {\n        return reject(\"Not array!\");\n      }\n      let updates = [];\n      let added = [];\n      let deleted = [];\n      let addedLogString = \"Added: \\n\";\n      let updatesLogString = \"Updated: \\n\";\n      let deletedLogString = \"Deleted: \\n\";\n\n      // Find added fixtures\n      for (let newEntry of newData) {\n        let newFixture = true;\n        for (let existing of existingData) {\n          if (newEntry.__UID === existing.__UID) {\n            newFixture = false;\n            break;\n          }\n        }\n\n        if (newFixture) {\n          addedLogString += `${newEntry.__UID}: Type: ${newEntry.instrumentType} / Id: ${newEntry.channel} \\n`;\n          added.push(newEntry);\n        }\n      }\n\n      // Find updates and deleted fixtures\n      for (let existing of existingData) {\n        const uid = existing.__UID;\n\n        let deletedFixture = true;\n        for (let newEntry of newData) {\n          if (newEntry.__UID === uid) {\n            // The fixture exists from before and we want to updated it (maybe)\n            deletedFixture = false;\n            if (!_.isEqual(existing, newEntry)) {\n              // If the fixture is not equal to earlier, get the difference\n\n              const keys1 = _.keys(existing);\n              const keys2 = _.keys(newEntry);\n\n              const allKeys = _.concat(keys1, keys2);\n              const uniqueKeys = _.uniq(allKeys);\n\n              let updateStr = `${newEntry.__UID}: `;\n              let haveDifferences = false;\n\n              // ------------- TEST 123 ----------------\n              for (let key of uniqueKeys) {\n                if (key !== \"__UID\") {\n                  if (key in existing && key in newEntry) {\n                    // The field is in both of the objects.\n                    // Compare the content\n\n                    if (existing[key] !== newEntry[key]) {\n                      // Difference for this key.\n                      haveDifferences = true;\n                      updateStr += `${key}: ${existing[key]}, `;\n                    }\n                  } else {\n                    // The key is not in both objects === difference\n                    if (key in existing) {\n                      updateStr += `${key}: ${existing[key]}, `;\n                      haveDifferences = true;\n                    }\n\n                    if (key in newEntry) {\n                      updateStr += `${key}: ${newEntry[key]}, `;\n                      haveDifferences = true;\n                    }\n                  }\n                }\n              }\n              // ---------------------------------------\n\n              // If we have differences, store them in the array\n              if (haveDifferences) {\n                updates.push(newEntry);\n                updatesLogString += updateStr + \"\\n\";\n              }\n            }\n            break;\n          }\n        }\n\n        if (deletedFixture) {\n          // Fixture does not exists from before. We have a new fixture\n          deletedLogString += `${existing.__UID}: Type: ${existing.instrumentType} / Id: ${existing.channel} \\n`;\n          deleted.push(existing);\n        }\n      }\n\n      // Concat all logs into one\n      const logString = updatesLogString + \"\\n\" + addedLogString + \"\\n\" + deletedLogString;\n\n      const updateData = {\n        update: updates,\n        add: added,\n        delete: deleted,\n        logString,\n      };\n\n      // this.setState({updateData})\n      resolve(updateData);\n    });\n  }\n\n  printDiff() {\n    return (\n      <div style={{ margin: 15 }}>\n        <p style={{ marginBottom: 10, marginTop: 15 }}>Changelog: </p>\n        <Input\n          componentClass=\"textarea\"\n          rows={15}\n          placeholder=\"Textarea\"\n          value={this.state.updateData.logString}\n          disabled\n          size=\"xs\"\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} onShow={this.onShow} size=\"lg\">\n        <Modal.Header>\n          <h3>Import Data</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div style={{ minHeight: \"500px\", marginLeft: 100, marginRight: 100 }}>\n            <Steps current={this.state.currentStep}>\n              <Steps.Item title=\"Choose data\" />\n              <Steps.Item title=\"Info\" />\n              <Steps.Item title=\"Compare\" />\n            </Steps>\n            {this.state.currentStep === 0 ? (\n              <FlexboxGrid justify=\"center\" align=\"middle\" style={{ height: 150, marginTop: 35 }}>\n                <FlexboxGrid.Item colspan={12} justify=\"center\" align=\"middle\">\n                  <Panel header={<h3>Choose data</h3>} bordered>\n                    <Form fluid>\n                      <FormGroup>\n                        <Button appearance=\"primary\" onClick={() => this.fileInputRef.current.click()}>\n                          Import data\n                        </Button>\n                      </FormGroup>\n                    </Form>\n                  </Panel>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            ) : this.state.currentStep === 1 ? (\n              <FlexboxGrid justify=\"center\" align=\"middle\" style={{ height: 150, marginTop: 35 }}>\n                <FlexboxGrid.Item colspan={12} justify=\"center\" align=\"middle\">\n                  <Panel header={<h3>Info</h3>} bordered>\n                    <Form fluid>\n                      <FormGroup>\n                        <div align=\"left\">\n                          <ul>\n                            {this.state.info.map((entry) => {\n                              return (\n                                <li key={entry.key}>\n                                  <b>{entry.key}</b> : {entry.value}\n                                </li>\n                              );\n                            })}\n                          </ul>\n                        </div>\n                        <Button appearance=\"primary\" onClick={() => this.setState({ currentStep: 2 })}>\n                          Next\n                        </Button>\n                      </FormGroup>\n                    </Form>\n                  </Panel>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            ) : this.state.currentStep === 2 ? (\n              <div>\n                <FlexboxGrid justify=\"center\" align=\"middle\" style={{ height: 150, marginTop: 35 }}>\n                  <FlexboxGrid.Item colspan={12} justify=\"center\" align=\"middle\">\n                    <Panel header={<h3>Compare and import</h3>} bordered>\n                      <ButtonToolbar>\n                        <Button appearance=\"primary\" onClick={this.overwriteData}>\n                          Overwrite\n                        </Button>\n                        <Button appearance=\"primary\" onClick={this.mergeData}>\n                          Merge\n                        </Button>\n                      </ButtonToolbar>\n                    </Panel>\n                  </FlexboxGrid.Item>\n                </FlexboxGrid>\n                {this.printDiff()}\n              </div>\n            ) : null}\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n        <input\n          type=\"file\"\n          onChange={this.uploadFile}\n          ref={this.fileInputRef}\n          multiple={false}\n          hidden\n          accept=\"application/JSON\"\n        />\n      </Modal>\n    );\n  }\n}\n\nexport default ImportModal;\n","import React from \"react\";\nimport { Modal, Button, Input, Form, FormGroup, ControlLabel } from \"rsuite\";\n\nclass ImportModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filename: \"ExportFromLST\",\n      warning: \"\",\n    };\n\n    this.downloadData = this.downloadData.bind(this);\n    this.onShow = this.onShow.bind(this);\n  }\n\n  downloadData() {\n    let fileName = this.state.filename;\n    if (fileName.length > 0) {\n      fileName += \".json\";\n      this.props.downloadData(fileName);\n      this.props.onHide();\n    } else {\n      this.setState({ warning: \"Error: No filename\" });\n    }\n  }\n\n  onShow() {\n    this.setState({ warning: \"\" });\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"xs\" onShow={this.onShow}>\n        <Modal.Header>\n          <h3>Export Data</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FormGroup>\n              <ControlLabel>Filename</ControlLabel>\n              <Input\n                placeholder=\"Filename\"\n                value={this.state.filename}\n                onChange={(value) => this.setState({ filename: value })}\n              />\n            </FormGroup>\n            <FormGroup>\n              <p style={{color:'red'}}>{this.state.warning}</p>\n            </FormGroup>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.downloadData}>\n            Export Data\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default ImportModal;\n","import React from \"react\";\nimport { Modal, Button } from \"rsuite\";\n\nclass LabelModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"lg\">\n        <Modal.Header>\n          <h3>Label Generator</h3>\n        </Modal.Header>\n\n        <Modal.Body></Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\">Ok</Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default LabelModal;\n","import React from \"react\";\nimport { Modal, Button, CheckboxGroup, Checkbox } from \"rsuite\";\n\nclass SettingsModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colDefParams: this.props.colDefParams,\n    };\n\n    this.submit = this.submit.bind(this);\n    this.handleChecked = this.handleChecked.bind(this);\n  }\n\n  submit() {\n    this.props.updateColDef(this.state.colDefParams);\n    this.props.onHide();\n    \n  }\n\n  handleChecked(checked,field) {\n    this.setState({\n      colDefParams: {\n        ...this.state.colDefParams,\n        [field]: checked,\n      }\n    })\n  }\n/*\nparams = {\n  vwxFixtureData: true, \n  userFixtureData: true, \n  general: true, \n  userFields: true, \n  power: true,\n  vwxCadData: true, \n}\n*/\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"lg\">\n        <Modal.Header>\n          <h3>Settings</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <CheckboxGroup name=\"checkboxList\">\n            <p>Visibilities</p>\n            <Checkbox checked={this.state.colDefParams.vwxFixtureData} onChange={(value,checked) => this.handleChecked(checked, 'vwxFixtureData')}>VWX Fixture Data</Checkbox>\n            <Checkbox checked={this.state.colDefParams.userFixtureData} onChange={(value,checked) => this.handleChecked(checked, 'userFixtureData')}>User Fixture Data</Checkbox>\n            <Checkbox checked={this.state.colDefParams.general} onChange={(value,checked) => this.handleChecked(checked, 'general')}>General</Checkbox>\n            <Checkbox checked={this.state.colDefParams.userFields} onChange={(value,checked) => this.handleChecked(checked, 'userFields')}>User Fields</Checkbox>\n            <Checkbox checked={this.state.colDefParams.power} onChange={(value,checked) => this.handleChecked(checked, 'power')}>Power</Checkbox>\n            <Checkbox checked={this.state.colDefParams.vwxCadData} onChange={(value,checked) => this.handleChecked(checked, 'vwxCadData')}>VWX Cad Data</Checkbox>\n          </CheckboxGroup>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.submit}>\n            Ok\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default SettingsModal;\n","import React from \"react\";\nimport { Modal, Button, Form, FormGroup, Input } from \"rsuite\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nclass FixtureDetailModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          headerName: \"Instrument Type (VWX)\",\n          field: \"instrumentType\",\n          sort: \"asc\",\n        },\n        {\n          headerName: \"Fixture Mode (VWX)\",\n          field: \"fixtureMode\",\n        },\n        {\n          headerName: \"User Instrument Type\",\n          field: \"userInstrumentType\",\n          editable: true,\n        },\n        {\n          headerName: \"User Fixture Mode\",\n          field: \"userFixtureMode\",\n          editable: true,\n        },\n      ],\n    };\n\n    this.submit = this.submit.bind(this);\n  }\n\n  async onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n\n    let uniqueFixturesAndModes = [];\n\n    const data = this.props.fixtureDetailData;\n\n    data.forEach((entry) => {\n      if (\"instrumentType\" in entry) {\n        const instrumentType = entry.instrumentType;\n        const fixtureMode = entry.fixtureMode;\n        const userInstrumentType = entry.userInstrumentType;\n        const userFixtureMode = entry.userFixtureMode;\n\n        let existsInList = false;\n        for (let row of uniqueFixturesAndModes) {\n          if (\n            row.instrumentType === instrumentType &&\n            row.fixtureMode === fixtureMode &&\n            row.userInstrumentType === userInstrumentType &&\n            row.userFixtureMode === userFixtureMode\n          ) {\n            existsInList = true;\n            break;\n          }\n        }\n        if (!existsInList) {\n          uniqueFixturesAndModes.push({\n            instrumentType,\n            fixtureMode,\n            userInstrumentType,\n            userFixtureMode,\n          });\n        }\n      }\n    });\n\n    this.gridApi.setRowData(uniqueFixturesAndModes);\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  submit() {\n    if (this.gridApi) {\n      let data = [];\n\n      this.gridApi.forEachNode((node) => {\n        data.push(node.data);\n      });\n\n      this.props.addUserModeAndName(data);\n    }\n\n    this.props.onHide();\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"lg\">\n        <Modal.Header>\n          <h3>Fixture details</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"agGridWrapper\" style={{ height: \"600px\" }}>\n            <Form>\n              <FormGroup>\n                <Input\n                  size=\"xs\"\n                  placeholder=\"Search\"\n                  onChange={(value) => this.gridApi.setQuickFilter(value)}\n                  style={{ width: \"100%\" }}\n                />\n              </FormGroup>\n            </Form>\n            <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n              <AgGridReact\n                columnDefs={this.state.columnDefs}\n                rowData={this.state.rowData}\n                onGridReady={this.onGridReady.bind(this)}\n                defaultColDef={{\n                  resizable: true,\n                  sortable: true,\n                }}\n                singleClickEdit={true}\n                enterMovesDownAfterEdit={true}\n                rowSelection=\"single\"\n                // onSelectionChanged={this.onSelectionChanged.bind(this)}\n              />\n            </div>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={() => this.submit()}>\n            Ok\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default FixtureDetailModal;\n","import React from \"react\";\nimport { Modal, Button, Form, FormGroup, Input, SelectPicker } from \"rsuite\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { circuitNameComparator, circuitTypeCellRenderer } from \"../../../Utils/fixtureGridTools\";\nimport { circuitTypes } from \"../../../Utils/constants\";\n\nclass PowerDetailModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          headerName: \"Circuit Name\",\n          field: \"circuitName\",\n          sort: \"asc\",\n          comparator: circuitNameComparator,\n        },\n        {\n          headerName: \"Circuit Type\",\n          field: \"circuitType\",\n          editable: true,\n          cellRenderer: circuitTypeCellRenderer,\n        },\n        {\n          headerName: \"Phase Sequence\",\n          field: \"phaseSequ\",\n          editable: true,\n        },\n      ],\n      circuitType: 0,\n      phaseSequ: \"\",\n    };\n\n    this.quickSearch = this.quickSearch.bind(this);\n    this.submit = this.submit.bind(this);\n    this.addPhaseSequence = this.addPhaseSequence.bind(this);\n    this.addCircuitTypeSequence = this.addCircuitTypeSequence.bind(this);\n  }\n\n  async onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n\n    let uniqueCircuits = [];\n\n    const data = this.props.fixtureDetailData;\n\n    data.forEach((entry) => {\n      if (\"circuitName\" in entry) {\n        const circuitName = entry.circuitName;\n        const circuitType = entry.circuitType;\n        const phaseSequ = entry.phaseSequ;\n\n        let existsInList = false;\n        for (let row of uniqueCircuits) {\n          if (row.circuitName === circuitName && row.circuitType === circuitType && row.phaseSequ === phaseSequ) {\n            existsInList = true;\n            break;\n          }\n        }\n        if (!existsInList) {\n          uniqueCircuits.push({\n            circuitName,\n            circuitType,\n            phaseSequ,\n          });\n        }\n      }\n    });\n\n    this.gridApi.setRowData(uniqueCircuits);\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  quickSearch(value) {\n    //console.log(e.target.value);\n    this.gridApi.setQuickFilter(value);\n  }\n\n  submit() {\n    if (this.gridApi) {\n      let data = [];\n\n      this.gridApi.forEachNode((node) => {\n        data.push(node.data);\n      });\n\n      this.props.addPowerDetails(data);\n    }\n\n    this.props.onHide();\n  }\n\n  assumeCircuitType() {\n    let updateData = [];\n    this.gridApi.forEachNode((node) => {\n      const circuitName = node.data.circuitName;\n      if (circuitName.charAt(0) === \"H\") {\n        updateData.push({\n          ...node.data,\n          circuitType: 1,\n        });\n      } else if (circuitName.charAt(0) === \"D\") {\n        updateData.push({\n          ...node.data,\n          circuitType: 2,\n        });\n      }\n    });\n    this.gridApi.applyTransaction({\n      update: updateData,\n    });\n  }\n\n  addPhaseSequence() {\n    const phaseSequ = this.state.phaseSequ;\n    const selectedRows = this.gridApi.getSelectedRows();\n\n    let updateData = [];\n    selectedRows.forEach((node, index) => {\n      updateData.push({\n        ...node,\n        phaseSequ,\n      });\n    });\n    this.gridApi.applyTransaction({\n      update: updateData,\n    });\n  }\n\n  addCircuitTypeSequence(circuitType) {\n    const selectedRows = this.gridApi.getSelectedRows();\n\n    let updateData = [];\n    selectedRows.forEach((node, index) => {\n      updateData.push({\n        ...node,\n        circuitType,\n      });\n    });\n    this.gridApi.applyTransaction({\n      update: updateData,\n    });\n    this.setState({circuitType})\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"lg\">\n        <Modal.Header>\n          <h3>Power details</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"agGridWrapper\" style={{ height: \"600px\" }}>\n            <Form>\n              <FormGroup>\n                <FormGroup>\n                  <SelectPicker \n                    style={{width: 250}}\n                    data={circuitTypes} \n                    value={this.state.circuitType}\n                    onChange={(circuitType) => this.addCircuitTypeSequence(circuitType)}\n                    searchable={false}\n                    cleanable={false}\n                    labelKey=\"title\"\n                    valueKey=\"value\"\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <Input\n                    placeholder=\"Phase sequence\"\n                    onChange={(phaseSequ) => this.setState({ phaseSequ })}\n                    style={{ width: 250 }}\n                    value={this.state.phaseSequ}\n                  />\n                  <Button appearance=\"subtle\" onClick={() => this.addPhaseSequence()}>\n                    Add to selected\n                  </Button>\n                </FormGroup>\n                <Input\n                  size=\"xs\"\n                  placeholder=\"Search\"\n                  onChange={(value) => this.quickSearch(value)}\n                  style={{ width: \"100%\" }}\n                />\n              </FormGroup>\n            </Form>\n            <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n              <AgGridReact\n                getRowNodeId={(data) => {\n                  return data.circuitName;\n                }}\n                columnDefs={this.state.columnDefs}\n                rowData={this.state.rowData}\n                onGridReady={this.onGridReady.bind(this)}\n                defaultColDef={{\n                  resizable: true,\n                  sortable: true,\n                }}\n                rowSelection=\"multiple\"\n                // onSelectionChanged={this.onSelectionChanged.bind(this)}\n              />\n            </div>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={() => this.submit()}>\n            Ok\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default PowerDetailModal;\n","import React from \"react\";\nimport { Modal, Button, Form, FormGroup, Input } from \"rsuite\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport LightingLibrary from \"../../../Mockdata/lightingLibrary.json\";\n\nclass LibraryModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowData: LightingLibrary,\n      columnDefs: [\n        {\n          headerName: \"Manufacturer\",\n          field: \"manufacturer\",\n        },\n        {\n          headerName: \"Model\",\n          field: \"model\",\n        },\n        {\n          headerName: \"Type\",\n          field: \"type\",\n        },\n        {\n          headerName: \"Short Name\",\n          field: \"shortName\",\n        },\n        {\n          headerName: \"Mode\",\n          field: \"mode\",\n        },\n        {\n          headerName: \"DMX Footprint\",\n          field: \"dmxFootprint\",\n        },\n        {\n          headerName: \"Wattage\",\n          field: \"wattage\",\n        },\n        {\n          headerName: \"Current\",\n          field: \"current\",\n        },\n        {\n          headerName: \"Circuit Type\",\n          field: \"circuitType\",\n        },\n        {\n          headerName: \"Load dynamics\",\n          field: \"loadDynamics\",\n        },\n      ],\n    };\n  }\n\n  async onGridReady(params) {\n    this.gridApi = params.api;\n    this.columnApi = params.columnApi;\n\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"lg\">\n        <Modal.Header>\n          <h3>Library</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"agGridWrapper\" style={{ height: \"600px\" }}>\n            <Form>\n              <FormGroup>\n                <Input\n                  size=\"xs\"\n                  placeholder=\"Search\"\n                  onChange={(value) => this.gridApi.setQuickFilter(value)}\n                  style={{ width: \"100%\" }}\n                />\n              </FormGroup>\n            </Form>\n            <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n              <AgGridReact\n                // getRowNodeId={(data) => {\n                //   return data.circuitName;\n                // }}\n                columnDefs={this.state.columnDefs}\n                rowData={this.state.rowData}\n                onGridReady={this.onGridReady.bind(this)}\n                defaultColDef={{\n                  resizable: true,\n                  sortable: true,\n                }}\n                rowSelection=\"single\"\n              />\n            </div>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Ok\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default LibraryModal;\n","import React from \"react\";\nimport { Modal, Button, Form, FormGroup, Input, ControlLabel } from \"rsuite\";\n\nclass DimmerSettingsModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let universe = 0;\n    let address = 0;\n    let numberOfChannels = 0;\n\n    if (this.props.dimmerAddressAndUniverse) {\n      universe = this.props.dimmerAddressAndUniverse.universe;\n      address = this.props.dimmerAddressAndUniverse.address;\n      numberOfChannels = this.props.dimmerAddressAndUniverse.numberOfChannels;\n    }\n\n    this.state = {\n      universe,\n      address,\n      numberOfChannels,\n    };\n    this.submitResult = this.submitResult.bind(this);\n  }\n\n  submitResult() {\n    this.props.onHide();\n    this.props.setDimmerAddressAndUniverse({\n      universe: parseInt(this.state.universe),\n      address: parseInt(this.state.address),\n      numberOfChannels: parseInt(this.state.numberOfChannels),\n    });\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.onHide} size=\"xs\">\n        <Modal.Header>\n          <h3>Dimmer settings</h3>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FormGroup>\n              <FormGroup>\n                <ControlLabel>Universe</ControlLabel>\n                <Input\n                  placeholder=\"Universe\"\n                  onChange={(universe) => this.setState({ universe })}\n                  style={{ width: 250 }}\n                  value={this.state.universe}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <ControlLabel>Address</ControlLabel>\n                <Input\n                  placeholder=\"Address\"\n                  onChange={(address) => this.setState({ address })}\n                  style={{ width: 250 }}\n                  value={this.state.address}\n                />\n              </FormGroup>\n              <FormGroup>\n                <ControlLabel>Number of channels</ControlLabel>\n                <Input\n                  placeholder=\"Number of channels\"\n                  onChange={(numberOfChannels) => this.setState({ numberOfChannels })}\n                  style={{ width: 250 }}\n                  value={this.state.numberOfChannels}\n                />\n              </FormGroup>\n            </FormGroup>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button appearance=\"subtle\" onClick={this.submitResult}>\n            Ok\n          </Button>\n          <Button appearance=\"subtle\" onClick={this.props.onHide}>\n            Quit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default DimmerSettingsModal;\n","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Container,\n  Footer,\n  Content,\n  Header,\n  Navbar,\n  Nav,\n  Icon,\n  FlexboxGrid,\n  Dropdown,\n} from \"rsuite\";\nimport { calculatePower, printPower } from \"./Helpers/PowerCalculation/powerCalculation\";\nimport { createColDef } from \"./Utils/FixtureGridColDef\";\nimport ReportModal from \"./Components/ReportModal\";\nimport ImportModal from \"./Components/ImportModal\";\nimport ExportModal from \"./Components/ExportModal\";\nimport LabelModal from \"./Components/LabelModal\";\nimport SettingsModal from \"./Components/SettingsModal\";\nimport FixtureDetailModal from \"./Components/FixtureDetailModal\";\nimport PowerDetailModal from \"./Components/PowerDetailModal\";\nimport LibraryModal from \"./Components/LibraryModal\";\nimport DimmerSettingsModal from \"./Components/DimmerSettingsModal\";\nimport { saveAs } from \"file-saver\";\nimport moment from \"moment\";\n\nclass FixtureGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Coldef params\n    const params = {\n      vwxFixtureData: true,\n      userFixtureData: true,\n      general: true,\n      userFields: false,\n      power: true,\n      vwxCadData: true,\n    };\n\n    this.state = {\n      columnDefs: createColDef(params),\n      colDefParams: params,\n      rowData: [],\n      totalPower: {},\n      selectedPower: {\n        phase1: 0,\n        phase2: 0,\n        phase3: 0,\n        total: 0,\n        phase1Frac: 0.0,\n        phase2Frac: 0.0,\n        phase3Frac: 0.0,\n      },\n      showImportModal: false,\n      showExportModal: false,\n      showReportModal: false,\n      showLabelModal: false,\n      showSettingsModal: false,\n      showPowerDetailModal: false,\n      showLibraryModal: false,\n      showDimmerSettingsModal: false,\n      reportData: [],\n      fixtureDetailData: [],\n      dimmerAddressAndUniverse: { universe: 0, address: 0, numberOfChannels: 0 },\n    };\n\n    this.showImportModal = this.showImportModal.bind(this);\n    this.showExportModal = this.showExportModal.bind(this);\n    this.showReportModal = this.showReportModal.bind(this);\n    this.showLabelModal = this.showLabelModal.bind(this);\n    this.showSettingsModal = this.showSettingsModal.bind(this);\n    this.showFixtureDetailModal = this.showFixtureDetailModal.bind(this);\n    this.addUserModeAndName = this.addUserModeAndName.bind(this);\n    this.showPowerDetailModal = this.showPowerDetailModal.bind(this);\n    this.showDimmerSettingsModal = this.showDimmerSettingsModal.bind(this);\n    this.addPowerDetails = this.addPowerDetails.bind(this);\n    this.updateColDef = this.updateColDef.bind(this);\n    this.sizeColumnsToFit = this.sizeColumnsToFit.bind(this);\n    this.overwriteData = this.overwriteData.bind(this);\n    this.mergeData = this.mergeData.bind(this);\n    this.downloadData = this.downloadData.bind(this);\n    this.saveColumnState = this.saveColumnState.bind(this);\n    this.getRowData = this.getRowData.bind(this);\n    this.setDimmerAddressAndUniverse = this.setDimmerAddressAndUniverse.bind(this);\n  }\n\n  componentDidMount() {}\n\n  async onGridReady(params) {\n    this.gridApi = params.api;\n    this.columnApi = params.columnApi;\n    this.getFixtureDataFromLocalstorage();\n    let totalPower = await this.calculateTotalPower();\n    this.setState({ totalPower });\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  async onSelectionChanged() {\n    let selectedRows = this.gridApi.getSelectedRows();\n    const selectedPower = await calculatePower(selectedRows, this.state.dimmerAddressAndUniverse);\n    this.setState({ selectedPower });\n  }\n\n  async onRowDataUpdated() {\n    if (this.gridApi) {\n      let totalPower = await this.calculateTotalPower();\n      this.setState({ totalPower });\n    }\n  }\n\n  async onRowDataChanged() {\n    if (this.gridApi) {\n      let totalPower = await this.calculateTotalPower();\n      this.setState({ totalPower });\n    }\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  async calculateTotalPower() {\n    let powerData = [];\n\n    this.gridApi.forEachNode((node) => {\n      powerData.push(node.data);\n    });\n\n    const totalPower = await calculatePower(powerData, this.state.dimmerAddressAndUniverse);\n    return totalPower;\n  }\n\n  showImportModal() {\n    this.setState({ showImportModal: true });\n  }\n\n  showExportModal() {\n    this.setState({ showExportModal: true });\n  }\n\n  showReportModal() {\n    if (this.gridApi) {\n      let reportData = [];\n\n      this.gridApi.forEachNodeAfterFilterAndSort((entry) => {\n        reportData.push(entry.data);\n      });\n      this.setState({ showReportModal: true, reportData });\n    }\n  }\n\n  showLabelModal() {\n    this.setState({ showLabelModal: true });\n  }\n\n  showSettingsModal() {\n    this.setState({ showSettingsModal: true });\n  }\n\n  showDimmerSettingsModal() {\n    this.setState({ showDimmerSettingsModal: true });\n  }\n\n  showFixtureDetailModal() {\n    if (this.gridApi) {\n      let fixtureDetailData = [];\n      this.gridApi.forEachNodeAfterFilterAndSort((entry) => {\n        fixtureDetailData.push(entry.data);\n      });\n      this.setState({ showFixtureDetailModal: true, fixtureDetailData });\n    }\n  }\n  showPowerDetailModal() {\n    if (this.gridApi) {\n      let fixtureDetailData = [];\n      this.gridApi.forEachNodeAfterFilterAndSort((entry) => {\n        fixtureDetailData.push(entry.data);\n      });\n      this.setState({ showPowerDetailModal: true, fixtureDetailData });\n    }\n  }\n\n  showLibraryModal() {\n    this.setState({ showLibraryModal: true });\n  }\n\n  addUserModeAndName(lookup) {\n    let transactionData = [];\n\n    this.gridApi.forEachNode((node) => {\n      const instrumentType = node.data.instrumentType;\n      const fixtureMode = node.data.fixtureMode;\n      const userInstrumentType = node.data.userInstrumentType;\n      const userFixtureMode = node.data.userFixtureMode;\n\n      lookup.forEach((entry) => {\n        // Add user fixture type\n        if (entry.instrumentType === instrumentType && entry.fixtureMode === fixtureMode) {\n          let updatedNode = node.data;\n\n          let dataToUpdate = false;\n\n          if (\"userInstrumentType\" in entry && entry.userInstrumentType !== userInstrumentType) {\n            updatedNode = {\n              ...updatedNode,\n              userInstrumentType: entry.userInstrumentType,\n            };\n            dataToUpdate = true;\n          }\n\n          if (\"userFixtureMode\" in entry && entry.userFixtureMode !== userFixtureMode) {\n            updatedNode = {\n              ...updatedNode,\n              userFixtureMode: entry.userFixtureMode,\n            };\n            dataToUpdate = true;\n          }\n\n          if (dataToUpdate) {\n            transactionData.push(updatedNode);\n          }\n        }\n      });\n    });\n\n    this.gridApi.applyTransaction({\n      update: transactionData,\n    });\n    // console.log(transactionData);\n  }\n\n  addPowerDetails(lookup) {\n    let transactionData = [];\n\n    this.gridApi.forEachNode((node) => {\n      lookup.forEach((entry) => {\n        if (node.data.circuitName === entry.circuitName) {\n          transactionData.push({\n            ...node.data,\n            circuitType: entry.circuitType,\n            phaseSequ: entry.phaseSequ,\n          });\n        }\n      });\n    });\n\n    this.gridApi.applyTransaction({\n      update: transactionData,\n    });\n  }\n\n  sizeColumnsToFit() {\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  updateColDef(params) {\n    const columnDefs = createColDef(params);\n    this.setState({ columnDefs });\n    // this.gridApi.sizeColumnsToFit();\n  }\n\n  overwriteData(data) {\n    if (this.gridApi) {\n      this.gridApi.setRowData(data);\n    }\n  }\n\n  mergeData(data) {\n    if (this.gridApi) {\n      this.gridApi.applyTransaction({\n        add: data.add,\n        update: data.update,\n        delete: data.delete,\n      });\n    }\n  }\n\n  downloadData(filename) {\n    if (this.gridApi) {\n      let lightingDevices = [];\n\n      this.gridApi.forEachNodeAfterFilterAndSort((entry) => {\n        lightingDevices.push(entry.data);\n      });\n\n      const data = {\n        info: [\n          {\n            source: \"LST\",\n            fileName: filename,\n            exportDate: moment().format(\"DD.MM.YYYY\"),\n            exportTime: moment().format(\"HH:mm\"),\n            fixtureCount: lightingDevices.length,\n          },\n        ],\n        lightingDevices,\n      };\n\n      const fileToDownload = new Blob([JSON.stringify(data, undefined, 2)], {\n        type: \"application/JSON\",\n        name: filename,\n      });\n\n      saveAs(fileToDownload, filename);\n    }\n  }\n\n  saveColumnState() {\n    const savedState = this.columnApi.getColumnState();\n\n    localStorage.setItem(\"fixtureGridSettings\", JSON.stringify(savedState));\n  }\n\n  getColumnState() {\n    const state = localStorage.getItem(\"fixtureGridSettings\");\n\n    const newState = JSON.parse(state);\n\n    this.columnApi.applyColumnState({ state: newState });\n  }\n\n  getFixtureDataFromLocalstorage() {\n    if (this.gridApi) {\n      const stringData = localStorage.getItem(\"fixtureData\");\n      if (stringData) {\n        const lightingDevices = JSON.parse(stringData);\n        this.gridApi.setRowData(lightingDevices);\n      }\n    }\n  }\n\n  getRowData() {\n    return new Promise((resolve, reject) => {\n      if (this.gridApi) {\n        let rowData = [];\n        this.gridApi.forEachNode((node) => {\n          rowData.push(node.data);\n        });\n        resolve(rowData);\n      }\n      reject(\"No data\");\n    });\n  }\n\n  setDimmerAddressAndUniverse(dimmerAddressAndUniverse) {\n    this.setState({ dimmerAddressAndUniverse }, () => this.onRowDataUpdated());\n  }\n\n  render() {\n    return (\n      <div className=\"show-container\">\n        <Container>\n          <Header>\n            <Navbar appearance=\"subtle\">\n              <Navbar.Body>\n                <Nav>\n                  <Dropdown title=\"Import/Export\">\n                    <Dropdown.Item onSelect={() => this.showImportModal()}>Import</Dropdown.Item>\n                    <Dropdown.Item onSelect={() => this.showExportModal()}>Export</Dropdown.Item>\n                  </Dropdown>\n                  <Nav.Item onClick={() => this.showReportModal()}>Reports</Nav.Item>\n                  {/* <Nav.Item onClick={() => this.showLabelModal()}>Labels</Nav.Item> */}\n                  <Nav.Item onClick={() => this.showFixtureDetailModal()}>Fixture Details</Nav.Item>\n                  <Nav.Item onClick={() => this.showPowerDetailModal()}>Power Details</Nav.Item>\n                  <Nav.Item onClick={() => this.showLibraryModal()}>Library</Nav.Item>\n                  <Nav.Item onClick={() => this.showDimmerSettingsModal()}>Dimmer Settings</Nav.Item>\n                </Nav>\n\n                <Nav pullRight>\n                  <Nav.Item onClick={() => this.sizeColumnsToFit()}>Size columns to fit</Nav.Item>\n                  <Nav.Item onClick={() => this.showSettingsModal()} icon={<Icon icon=\"cog\" />}>\n                    Settings\n                  </Nav.Item>\n                </Nav>\n              </Navbar.Body>\n            </Navbar>\n          </Header>\n          <Content>\n            <div className=\"agGridWrapper\" style={{ height: \"81vh\" }}>\n              <Form>\n                <FormGroup>\n                  <Input\n                    size=\"xs\"\n                    placeholder=\"Search\"\n                    onChange={(value) => this.quickSearch(value)}\n                    style={{ width: \"100%\" }}\n                  />\n                </FormGroup>\n              </Form>\n              <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n                <AgGridReact\n                  getRowNodeId={(data) => {\n                    return data.__UID;\n                  }}\n                  columnDefs={this.state.columnDefs}\n                  rowData={this.state.rowData}\n                  onGridReady={this.onGridReady.bind(this)}\n                  defaultColDef={{\n                    resizable: true,\n                    sort: true,\n                  }}\n                  sideBar={true}\n                  rowSelection=\"multiple\"\n                  onSelectionChanged={this.onSelectionChanged.bind(this)}\n                  onRowDataChanged={this.onRowDataChanged.bind(this)}\n                  onRowDataUpdated={this.onRowDataUpdated.bind(this)}\n                />\n              </div>\n            </div>\n          </Content>\n          <Footer>\n            <div>\n              <FlexboxGrid>\n                <FlexboxGrid.Item colspan={6}>\n                  <p style={{ margin: \"5px\", marginRight: \"15px\" }}>\n                    <b>Total power</b>\n                  </p>\n                  <div>{printPower(this.state.totalPower)}</div>\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item colspan={6}>\n                  <p style={{ margin: \"5px\", marginRight: \"15px\" }}>\n                    <b>Selected power</b>\n                  </p>\n                  <div>{printPower(this.state.selectedPower)}</div>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            </div>\n          </Footer>\n        </Container>\n\n        <ReportModal\n          show={this.state.showReportModal}\n          onHide={() => this.setState({ showReportModal: false })}\n          rowData={this.state.reportData}\n        />\n\n        <ImportModal\n          show={this.state.showImportModal}\n          onHide={() => this.setState({ showImportModal: false })}\n          mergeData={this.mergeData}\n          overwriteData={this.overwriteData}\n          getRowData={this.getRowData}\n        />\n\n        <ExportModal\n          show={this.state.showExportModal}\n          onHide={() => this.setState({ showExportModal: false })}\n          downloadData={this.downloadData}\n        />\n\n        <LabelModal show={this.state.showLabelModal} onHide={() => this.setState({ showLabelModal: false })} />\n\n        <SettingsModal\n          show={this.state.showSettingsModal}\n          onHide={() => this.setState({ showSettingsModal: false })}\n          updateColDef={this.updateColDef}\n          colDefParams={this.state.colDefParams}\n          saveColumnState={this.saveColumnState}\n        />\n\n        <FixtureDetailModal\n          show={this.state.showFixtureDetailModal}\n          onHide={() => this.setState({ showFixtureDetailModal: false })}\n          fixtureDetailData={this.state.fixtureDetailData}\n          addUserModeAndName={this.addUserModeAndName}\n        />\n\n        <PowerDetailModal\n          show={this.state.showPowerDetailModal}\n          onHide={() => this.setState({ showPowerDetailModal: false })}\n          fixtureDetailData={this.state.fixtureDetailData}\n          addPowerDetails={this.addPowerDetails}\n        />\n\n        <DimmerSettingsModal\n          show={this.state.showDimmerSettingsModal}\n          onHide={() => this.setState({ showDimmerSettingsModal: false })}\n          dimmerAddressAndUniverse={this.state.dimmerAddressAndUniverse}\n          setDimmerAddressAndUniverse={this.setDimmerAddressAndUniverse}\n        />\n\n        <LibraryModal show={this.state.showLibraryModal} onHide={() => this.setState({ showLibraryModal: false })} />\n      </div>\n    );\n  }\n}\n\nexport default FixtureGrid;\n","export const colDef = [\n    {\n      headerName: \"Id\",\n      field: \"hoistNumber\",\n      sortable: true,\n      sort: 'asc',\n    },\n    {\n        headerName: \"Label\",\n        field: \"hoistLabel\",\n        sortable: true,\n    },\n    {\n        headerName: \"Type\",\n        field: \"type\",\n        sortable: true,\n    },\n    {\n        headerName: \"Location\",\n        field: \"location\",\n        sortable: true,\n    },\n    {\n        headerName: \"Controller ID\",\n        field: \"controlId\",\n        sortable: true,\n    },\n    {\n        headerName: \"Distro Port\",\n        field: \"distroPort\",\n        sortable: true,\n    },\n    {\n        headerName: \"Controller Location\",\n        field: \"controllerLocation\",\n        sortable: true,\n    },\n    {\n        headerName: \"Hoist Position\",\n        field: \"hoistPosition\",\n        sortable: true,\n    },\n    {\n        headerName: \"User 1\",\n        field: \"user1\",\n        sortable: true,\n    },\n    {\n        headerName: \"User 2\",\n        field: \"user2\",\n        sortable: true,\n    },\n    {\n        headerName: \"User 3\",\n        field: \"user3\",\n        sortable: true,\n    },\n    {\n        headerName: \"User 4\",\n        field: \"user4\",\n        sortable: true,\n    },\n    {\n        headerName: \"Chain\",\n        field: 'doublePurchase',\n        sortable: true,\n        cellRenderer: params => {\n            return params.value === 'True' ? \"Double\" : \"Single\";\n        },\n    },\n    {\n        headerName: \"VWX Class\",\n        field: \"class\",\n        sortable: true,\n        editable: true,\n      },\n      {\n        headerName: \"VWX Layer\",\n        field: \"layer\",\n        sortable: true,\n        editable: false,\n      },\n    {\n      headerName: \"UID\",\n      field: \"__UID\",\n      sortable: true,\n    },\n  ];\n  \n//   \"hoistNumber\": \"9999\",\n//   \"hoistLabel\": \"Kaffe\",\n//   \"type\": \"1/2 Ton\",\n//   \"location\": \"LX666\",\n//   \"controlId\": \"ID1\",\n//   \"distroPort\": \"PORT1\",\n//   \"controllerLocation\": \"DC\"\n//   \"hoistPosition\": \"\",\n//   \"user1\": \"user1\",\n//   \"user2\": \"user2\",\n//   \"user3\": \"user3\",\n//   \"user4\": \"user4\",\n//   \"doublePurchase\": \"False\",\n  \n  \n  \n  \n  ","import React from \"react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport HoistData from \"../../Mockdata/importexportHoists.json\";\nimport { colDef } from \"./Utils/HoistGridColDef\";\nimport { Form, FormGroup, Input } from \"rsuite\";\n\nclass HoistGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: colDef,\n      rowData: HoistData.hoists,\n    };\n  }\n\n  componentDidMount() {}\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  render() {\n    return (\n      <div className=\"agGridWrapper\" style={{ height: \"90vh\" }}>\n        <Form>\n          <FormGroup>\n            <Input\n              size=\"xs\"\n              placeholder=\"Search\"\n              onChange={(value) => this.quickSearch(value)}\n              style={{ width: \"100%\" }}\n            />\n          </FormGroup>\n        </Form>\n\n        <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            onGridReady={this.onGridReady.bind(this)}\n            defaultColDef={{\n              resizeable: true,\n              sort: true,\n            }}\n            sideBar={true}\n            rowSelection=\"multiple\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HoistGrid;\n","export const colDef = [\n  {\n    headerName: \"Type\",\n    field: \"modelName\",\n    sortable: true,\n    resizable: true,\n    sort: 'asc'\n  },\n  {\n    headerName: \"Length\",\n    field: \"length\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"Color\",\n    field: \"trussColor\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"Manufacturer\",\n    field: \"manufacturer\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"Height\",\n    field: \"height\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"Width\",\n    field: \"width\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"Weight\",\n    field: \"weight\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 1\",\n    field: \"userField1\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 2\",\n    field: \"userField2\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 3\",\n    field: \"userField3\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 4\",\n    field: \"userField4\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 5\",\n    field: \"userField5\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"User 6\",\n    field: \"userField6\",\n    sortable: true,\n    resizable: true,\n  },\n  {\n    headerName: \"VWX Class\",\n    field: \"class\",\n    sortable: true,\n    editable: true,\n  },\n  {\n    headerName: \"VWX Layer\",\n    field: \"layer\",\n    sortable: true,\n    editable: false,\n  },\n  {\n    headerName: \"UID\",\n    field: \"__UID\",\n    sortable: true,\n    resizable: true,\n  },\n];\n\n//   {\n\n//     \"modelName\": \"XD-300\",\n//     \"length\": \"3000mm\",\n//     \"trussColor\": \"Silver\",\n//     \"manufacturer\": \"Eurotruss\",\n//     \"height\": \"400mm\",\n//     \"width\": \"290mm\",\n//     \"weight\": \"27.00\",\n\n//     \"userField1\": \"\"\n//     \"userField1\": \"\",\n//     \"userField2\": \"\"\n//     \"userField3\": \"\"\n//     \"userField4\": \"\"\n//     \"userField5\": \"\",\n//     \"userField6\": \"\",\n//     \"__UID\": \"none\",\n// },\n","import React from \"react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport Trussdata from \"../../Mockdata/importexportTruss.json\";\nimport { colDef } from \"./Utils/TrussGridColDef\";\nimport { Form, FormGroup, Input } from \"rsuite\";\n\nclass TrussGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: colDef,\n      rowData: Trussdata.truss,\n    };\n  }\n\n  componentDidMount() {}\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  render() {\n    return (\n      <div className=\"agGridWrapper\" style={{ height: \"100vh\" }}>\n        <Form>\n          <FormGroup>\n            <Input\n              size=\"xs\"\n              placeholder=\"Search\"\n              onChange={(value) => this.quickSearch(value)}\n              style={{ width: \"100%\" }}\n            />\n          </FormGroup>\n        </Form>\n\n        <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            onGridReady={this.onGridReady.bind(this)}\n            defaultColDef={{\n              resizeable: true,\n              sort: true,\n            }}\n            sideBar={true}\n            rowSelection=\"multiple\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TrussGrid;\n","import {circuitNameComparator} from '../../../Utils/fixtureGridTools';\n\nexport const colDef = [\n  {\n    headerName: \"Circuit Name\",\n    field: \"circuitName\",\n    sortable: true,\n    sort: 'asc',\n    comparator: circuitNameComparator,\n    \n  },\n  {\n    headerName: \"Position\",\n    field: \"position\",\n    sortable: true,\n  },\n  {\n    headerName: \"Type\",\n    field: \"type\",\n    sortable: true,\n    editable: true, \n    cellEditorSelector: (params) => {\n        return {\n          component: \"agSelectCellEditor\",\n          params: {\n            values: [\"2.5mm2\", \"1.5mm2\"],\n          },\n        };\n      },\n  },\n  {\n    headerName: \"Part 1 (DC)\",\n    field: \"part1\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 2\",\n    field: \"part2\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 3\",\n    field: \"part3\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 4\",\n    field: \"part4\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 5 (Truss)\",\n    field: \"part5\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Breakout\",\n    field: \"breakout\",\n    sortable: true,\n    editable: true, \n    // valueSetter: function(params) {\n    //     params.data.name = params.newValue;\n    //     return true;\n    // },\n    cellEditorSelector: (params) => {\n      return {\n        component: \"agSelectCellEditor\",\n        params: {\n          values: [\"2m Breakout\", \"6m Breakout\", \"12m Breakout\", \"Box\"],\n        },\n      };\n    },\n  },\n];\n","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nimport FixtureData from \"../../Mockdata/importexportLights.json\";\nimport { colDef } from \"./Utils/SocaListColDef\";\nimport {Form, FormGroup, Input } from 'rsuite';\n\nclass SocaList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: colDef,\n      rowData: [],\n    };\n  }\n\n  componentDidMount() {}\n\n  getSocaNamesFromData() {\n    let data = FixtureData.lightingDevices;\n    let socaList = [];\n\n    data.forEach((entry) => {\n      let circuitName = entry.circuitName;\n      let position = entry.position;\n\n      let existsInList = false;\n      for (let row of socaList) {\n        if (row.circuitName === circuitName) {\n          existsInList = true;\n          break;\n        }\n      }\n\n      if (!existsInList) {\n        socaList.push({\n          circuitName,\n          position,\n          type: \"2.5mm2\",\n        });\n      }\n    });\n\n    this.gridApi.setRowData(socaList);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n\n    this.getSocaNamesFromData();\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  render() {\n    return (\n      <div className=\"agGridWrapper\" style={{ height: \"90vh\" }}>\n        <Form>\n          <FormGroup>\n            <Input\n            size=\"xs\"\n              placeholder=\"Search\"\n              onChange={(value) => this.quickSearch(value)}\n              style={{ width: \"100%\" }}\n            />\n          </FormGroup>\n        </Form>\n        <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            onGridReady={this.onGridReady.bind(this)}\n            defaultColDef={{\n              resizable: true,\n              sort: true,\n            }}\n            sideBar={true}\n            rowSelection=\"multiple\"\n            enterMovesDown={true}\n            enterMovesDownAfterEdit={true}\n          />\n        </div>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default SocaList;\n","import {dmxLineComparator} from '../../../Utils/fixtureGridTools';\n\nexport const colDef = [\n  {\n    headerName: \"Dmx Line\",\n    field: \"dmxLine\",\n    sortable: true,\n    sort: 'asc',\n    comparator: dmxLineComparator,\n  },\n  {\n    headerName: \"Position\",\n    field: \"position\",\n    sortable: true,\n  },\n  {\n    headerName: \"Type\",\n    field: \"type\",\n    sortable: true,\n    editable: true, \n    cellEditorSelector: (params) => {\n        return {\n          component: \"agSelectCellEditor\",\n          params: {\n            values: [\"5p\", \"3p\"],\n          },\n        };\n      },\n  },\n  {\n    headerName: \"Part 1 (DC)\",\n    field: \"part1\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 2\",\n    field: \"part2\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 3\",\n    field: \"part3\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 4\",\n    field: \"part4\",\n    sortable: true,\n    editable: true, \n  },\n  {\n    headerName: \"Part 5 (Truss)\",\n    field: \"part5\",\n    sortable: true,\n    editable: true, \n  },\n\n];\n","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nimport FixtureData from \"../../Mockdata/importexportLights.json\";\nimport { colDef } from \"./Utils/DmxListColDef\";\n\nimport { FormGroup, Form, Input } from \"rsuite\";\n\nclass DmxList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: colDef,\n      rowData: [],\n    };\n  }\n\n  componentDidMount() {}\n\n  getDmxLinesFromFromData() {\n    let data = FixtureData.lightingDevices;\n    let dmxList = [];\n\n    data.forEach((entry) => {\n      if (\"dmxLine\" in entry) {\n        let dmxLine = entry.dmxLine;\n        let position = entry.position;\n\n        let existsInList = false;\n        for (let row of dmxList) {\n          if (row.dmxLine === dmxLine) {\n            existsInList = true;\n            break;\n          }\n        }\n\n        if (!existsInList) {\n          dmxList.push({\n            dmxLine,\n            position,\n          });\n        }\n      }\n    });\n\n    this.gridApi.setRowData(dmxList);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n\n    this.getDmxLinesFromFromData();\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  paginationChanged() {\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  render() {\n    return (\n      <div className=\"agGridWrapper\" style={{ height: \"90vh\" }}>\n        <Form>\n          <FormGroup>\n            <Input\n              size=\"xs\"\n              placeholder=\"Search\"\n              onChange={(value) => this.quickSearch(value)}\n              style={{ width: \"100%\" }}\n            />\n          </FormGroup>\n        </Form>\n        <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            onGridReady={this.onGridReady.bind(this)}\n            paginationChanged={this.paginationChanged.bind(this)}\n            defaultColDef={{\n              resizable: true,\n              sort: true,\n            }}\n            sideBar={true}\n            rowSelection=\"multiple\"\n            enterMovesDown={true}\n            enterMovesDownAfterEdit={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DmxList;\n","export const colDef = [\n  {\n    headerName: \"Manufacturer\",\n    field: \"manufacturer\",\n    sortable: true,\n  },\n  {\n    headerName: \"Model\",\n    field: \"model\",\n    sortable: true,\n  },\n  {\n    headerName: \"Type\",\n    field: \"type\",\n    sortable: true,\n  },\n  {\n    headerName: \"Length\",\n    field: \"length\",\n    sortable: true,\n  },\n  {\n    headerName: \"Width\",\n    field: \"width\",\n    sortable: true,\n  },\n  {\n    headerName: \"Height\",\n    field: \"height\",\n    sortable: true,\n  },\n\n  {\n    headerName: \"Booking Number\",\n    field: \"bookingNr\",\n    sortable: true,\n  },\n\n  {\n    headerName: \"Art-Number\",\n    field: \"artNr\",\n    sortable: true,\n  },\n\n  {\n    headerName: \"VWX Class\",\n    field: \"class\",\n    sortable: true,\n  },\n  {\n    headerName: \"VWX Layer\",\n    field: \"layer\",\n    sortable: true,\n  },\n  {\n    headerName: \"__UID\",\n    field: \"__UID\",\n    sortable: true,\n  },\n];\n\n\n\n// \"bookingNr\": \"0\",\n// \"artNr\": \"\",\n\n// \"height\": \"565\",\n// \"model\": \"ZB ADJUSTABLE BASE 60\",\n// \"width\": \"205\",\n// \"type\": \"Accessory\",\n// \"weight\": \"3.60\"\n// \"length\": \"150\",\n// \"manufacturer\": \"Layher\",\n// \"__UID\": \"none\",\n// \"layer\": \"Design Layer-1\",\n// \"class\": \"Stage-Mobile-Structures\",\n","import React from \"react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport Scaffdata from \"../../Mockdata/importexportScaff.json\";\nimport { colDef } from \"./Utils/ScaffGridColDef\";\nimport { Form, FormGroup, Input } from \"rsuite\";\n\nclass ScaffGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: colDef,\n      rowData: Scaffdata.scaff,\n    };\n  }\n\n  componentDidMount() {}\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.AgGridColumnApi = params.columnApi;\n  }\n\n  quickSearch(value) {\n    this.gridApi.setQuickFilter(value);\n  }\n\n  render() {\n    return (\n      <div className=\"agGridWrapper\" style={{ height: \"100vh\" }}>\n        <Form>\n          <FormGroup>\n            <Input\n            size=\"xs\"\n              placeholder=\"Search\"\n              onChange={(value) => this.quickSearch(value)}\n              style={{ width: \"100%\" }}\n            />\n          </FormGroup>\n        </Form>\n        <div className=\"ag-theme-balham-dark\" style={{ flex: 1 }}>\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            rowData={this.state.rowData}\n            onGridReady={this.onGridReady.bind(this)}\n            defaultColDef={{\n              resizable: true,\n              sort: true,\n            }}\n            sideBar={true}\n            rowSelection=\"multiple\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScaffGrid;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GL from \"golden-layout/dist/goldenlayout\";\nimport FixtureGrid from \"../FixtureGrid/FixtureGrid\";\nimport HoistGrid from '../Hoists/HoistGrid';\nimport TrussGrid from '../Truss/TrussGrid';\nimport SocaList from '../SocaList/SocaList';\nimport DmxList from  '../DmxList/DmxList';\nimport ScaffGrid from '../Scaff/ScaffGrid';\n\nimport \"../../Assets/CSS/goldenlayout-base.css\";\nimport \"../../Assets/CSS/goldenlayout-dark-theme.css\";\n\nwindow.React = React;\nwindow.ReactDOM = ReactDOM;\n\nlet config = {\n  content: [\n    {\n      type: \"row\",\n      content: [\n        {\n          type: \"stack\",\n          width: 60,\n          content: [\n            {\n              type: \"react-component\",\n              component: \"FixtureGrid\",\n              title: \"Fixtures\",\n            },\n            // {\n            //   type: \"row\",\n            //   title: \"Cableplan\",\n            //   content: [\n            //     {\n            //       type: \"react-component\",\n            //       component: \"SocaList\",\n            //       title: \"Soca List\"\n            //     },\n            //     {\n            //       type: \"react-component\",\n            //       component: \"DmxList\",\n            //       title: \"DMX List\"\n            //     },\n\n            //   ]\n            // },\n            // {\n            //   type: \"react-component\",\n            //   component: \"TrussGrid\",\n            //   title: \"Truss\",\n            // },\n            // {\n            //   type: \"react-component\",\n            //   component: \"HoistGrid\",\n            //   title: \"Hoists\",\n            // },\n            // {\n            //   type: \"react-component\",\n            //   component: \"ScaffGrid\",\n            //   title: \"Scaff\",\n            // },\n\n          ],\n        },\n      ],\n    },\n  ],\n};\n\n//var myLayout = new GoldenLayout(config);\n\n// myLayout.registerComponent(\"testComponent\", function () {});\n\n// myLayout.init();\n\nclass GLMainWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    let self = this;\n    setTimeout(() => {\n      //self.createGoldenLayout(MainLayout, false);\n      self.createGoldenLayout(config, false);\n    }, 100);\n  }\n\n  wrapComponent(Component) {\n    let self = this;\n    class Wrapped extends React.Component {\n      render() {\n        return <Component {...self.props} />;\n      }\n    }\n    return Wrapped;\n  }\n\n  async createGoldenLayout(layout, layOutChange) {\n    let myLayoutTicket = new GL(layout);\n    myLayoutTicket._isFullPage = true;\n    \n    myLayoutTicket.registerComponent(\"FixtureGrid\", FixtureGrid );\n    myLayoutTicket.registerComponent(\"HoistGrid\", HoistGrid);\n    myLayoutTicket.registerComponent(\"TrussGrid\", TrussGrid);\n    myLayoutTicket.registerComponent(\"SocaList\", SocaList);\n    myLayoutTicket.registerComponent(\"DmxList\", DmxList);\n    myLayoutTicket.registerComponent(\"ScaffGrid\", ScaffGrid);\n    myLayoutTicket.init();\n  }\n\n  render() {\n    return (\n      <div className={`fixtureView`} ref={(input) => (this.layout = input)} />\n    );\n  }\n}\n\nexport default GLMainWrapper;\n","import React from 'react';\n\nimport GLMainWrapper from './Screens/Main/GLMainWrapper';\n\nclass App extends React.Component{\n  render() {\n    document.title = \"Lighting system tool\"\n    return (  \n      <GLMainWrapper />\n      )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'rsuite/dist/styles/rsuite-dark.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}